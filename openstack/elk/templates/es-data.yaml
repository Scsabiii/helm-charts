apiVersion: {{ if and (eq .Capabilities.KubeVersion.Major "1") (le .Capabilities.KubeVersion.Minor "5") }}apps/v1alpha1{{ else }}apps/v1beta1{{ end }}
kind: {{ if and (eq .Capabilities.KubeVersion.Major "1") (le .Capabilities.KubeVersion.Minor "5") }}PetSet{{ else }}StatefulSet{{ end }}
metadata:
  name: es-data
  namespace: elk
  labels:
    system: openstack
    service: logging
    component: elasticsearch
    role: data
  annotations:
    kubernetes.io/change-cause: {{.Values.cluster_deployment_reason}}
spec:
  serviceName: "es-data"
  replicas: {{.Values.elk_elasticsearch_data_replicas}}
  template:
    metadata:
      labels:
        component: elasticsearch
        role: data
      annotations:
        checksum/elk-templates-es-etc-configmap.yaml: "dummy"
        checksum/elk-templates-es-bin-configmap.yaml: "dummy"
#        scheduler.alpha.kubernetes.io/affinity:  >
#          {
#          "podAntiAffinity": {
#            "requiredDuringSchedulingIgnoredDuringExecution": [{
#              "labelSelector": {
#                "matchExpressions": [{
#                  "key": "role",
#                  "operator": "In",
#                  "values": ["data"]
#                }]
#              },
#              "topologyKey": "kubernetes.io/hostname"
#            }]
#          }
#        }
        pod.alpha.kubernetes.io/initialized: "true"
    spec:
      nodeSelector:
        zone: farm
      volumes:
        - name: es-bin
          configMap:
            name: es-bin
        - name: es-etc
          configMap:
            name: es-etc
      containers:
        - name: es
          image: {{.Values.docker_repo}}/elk-elasticsearch:{{.Values.elk_image_version_elasticsearch}}
          imagePullPolicy: IfNotPresent
#          command: ["/usr/local/bin/dumb-init", "/bin/bash", "-c", "while true; do sleep 1000; done"]
          command: ["/usr/local/bin/dumb-init", "/bin/bash", "/es-bin/elasticsearch-start"]
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBERNETES_CA_CERTIFICATE_FILE
              value: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: "CLUSTER_NAME"
              value: "elkelasticsearch"
            - name: NODE_MASTER
              value: "false"
            - name: NODE_INGEST
              value: "false"
            - name: HTTP_ENABLE
              value: "true"
          securityContext:
            capabilities:
              add:
                - IPC_LOCK
                - SYS_RESOURCE
          volumeMounts:
            - mountPath: /data
              name: es
            - mountPath: /es-bin
              name: es-bin
            - mountPath: /es-etc
              name: es-etc
#          lifecycle:
#            preStop:
#              exec:
#                command: ["bash, /es-bin/elasticsearch_stop"]
#          livenessProbe:
#            exec:
#              command:
#              - /es-bin/elasticsearch_health
#            timeoutSeconds: 30
#            initialDelaySeconds: 120
          ports:
            - name: transport
              containerPort: {{.Values.elk_elasticsearch_port_cluster}}
              protocol: TCP
            - name: dummymasterport
              hostPort: {{.Values.elk_elasticsearch_data_dummy_port}}
              hostIP: 127.0.0.1
              containerPort: {{.Values.elk_elasticsearch_data_dummy_port}}
  volumeClaimTemplates:
  - metadata:
      name: es
      namespace: elk
#      annotations:
#        volume.alpha.kubernetes.io/storage-class: anything
    spec:
      accessModes: [ "ReadWriteMany" ]
      resources:
        requests:
          storage: {{.Values.elk_elasticsearch_data_volumesize}}
